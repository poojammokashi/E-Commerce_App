https://github.com/choudhary-ravinder/E-Commerce-Project/tree/main
AI Color is a Palette Generator - Browse, Edit, Visualize and Generate Unique Color Palettes
Happy Hues - Curated colors in context.
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
https://e-commerse-app-alpha.vercel.app/ 
https://fakestoreapi.com/products   ---->fake api

shopping cart data

[

 { id: 1, name: 'Laptop', price: 1200.00, quantity: 1, image: "https://placehold.co/400x300/f1c1b9/white?text=Premium+Leather+Bag" },

 { id: 2, name: 'Headphones', price: 150.00, quantity: 1, image: "https://placehold.co/400x300/f1c1b9/white?text=Premium+Leather+Bag" },

 { id: 3, name: 'Mouse', price: 25.00, quantity: 1, image: "https://placehold.co/400x300/f1c1b9/white?text=Premium+Leather+Bag" },

 { id: 4, name: 'Airpods', price: 120.00, quantity: 1, image: "https://placehold.co/400x300/f1c1b9/white?text=Premium+Leather+Bag" },
 { id: 5, name: 'Cable', price: 10.00, quantity: 1, image: "https://placehold.co/400x300/f1c1b9/white?text=Premium+Leather+Bag" },

 { id: 6, name: 'Keyboard', price: 50.00, quantity: 1, image: "https://placehold.co/400x300/f1c1b9/white?text=Premium+Leather+Bag" },

 { id: 7, name: 'Cable', price: 10.00, quantity: 1, image: "https://placehold.co/400x300/f1c1b9/white?text=Premium+Leather+Bag" },

 { id: 8, name: 'Keyboard', price: 50.00, quantity: 1, image: "https://placehold.co/400x300/f1c1b9/white?text=Premium+Leather+Bag" }

 ]


 // Callback example
        function fetchDataCallback(url, callback) {
            const xhr = new XMLHttpRequest(); // Create a new XMLHttpRequest object
            xhr.open('GET', url, true); // Initialize it with GET method and URL
            xhr.onload = function() {
                if (xhr.status >= 200 && xhr.status < 300) {
                    // If the request is successful, call the callback with the response
                    callback(null, JSON.parse(xhr.responseText));
                } else {
                    // If there's an error, call the callback with the error
                    callback(xhr.statusText, null);
                }
            };
            xhr.onerror = function() {
                // Handle network errors
                callback(xhr.statusText, null);
            };
            xhr.send(); // Send the request
        }

        function fetchDataWithCallbackBasedPromise(url) {
            return new Promise((resolve, reject) => {
                fetchDataCallback(url, (error, data) => {
                    if (error) {
                        reject(error); // Reject promise with error
                    } else {
                        resolve(data); // Resolve promise with data
                    }
                });
            });
        }

        // Example usage of callback
        // fetchDataCallback('https://fakestoreapi.com/products', (error, data) => {
        //     if (error) {
        //         console.error('Error fetching products:', error);
        //         return;
        //     }
        //     // Process the data if there's no error
        //     console.log('Products fetched with callback:', data);
        // });

        // ---------------------------------------------------------------------------------
        // ---------------------------------------------------------------------------------
        // ---------------------------------------------------------------------------------

        // Promises example using XMLHttpRequest()
        // function fetchDataPromise(url) {
        //     return new Promise((resolve, reject) => {
        //         const xhr = new XMLHttpRequest(); // Create a new XMLHttpRequest object
        //         xhr.open('GET', url, true); // Initialize it with GET method and URL
        //         xhr.onload = function() {
        //             if (xhr.status >= 200 && xhr.status < 300) {
        //                 // Resolve the promise with the response
        //                 resolve(JSON.parse(xhr.responseText));
        //             } else {
        //                 // Reject the promise with the status text
        //                 reject(xhr.statusText);
        //             }
        //         };
        //         xhr.onerror = function() {
        //             // Reject the promise with the status text
        //             reject(xhr.statusText);
        //         };
        //         xhr.send(); // Send the request
        //     });
        // }

        // Promises example using fetch API
        function fetchDataPromise(url) {
            return fetch(url)  // Use the passed-in 'url' parameter
                .then(res => {
                    if (!res.ok) {
                        throw new Error('Network response was not ok ' + res.statusText);
                    }
                    return res.json();  // Notice the parentheses to call the method
                })
                .catch(err => {
                    console.error('There was a problem with the fetch operation:', err);
                });
        }

        // Example usage of promises
        // fetchDataPromise('https://fakestoreapi.com/products')
        //     .then(data => {
        //         // Process the data
        //         console.log('Products fetched with promise:', data);
        //     })
        //     .catch(error => {
        //         // Handle errors
        //         console.error('Error fetching products:', error);
        //     });

        // ---------------------------------------------------------------------------------
        // ---------------------------------------------------------------------------------
        // ---------------------------------------------------------------------------------

        // Async/Await example with Fetch API
        async function fetchDataAsync(url) {
            try {
                const response = await fetch(url); // Await the fetch request
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                const data = await response.json(); // Await the response conversion to JSON
                return data;
            } catch (error) {
                console.error('Error fetching products with async/await:', error);
                throw error;
            }
        }

        // ---------------------------------------------------------------------------------
        // ---------------------------------------------------------------------------------
        // ---------------------------------------------------------------------------------

        // Example usage of async/await
        document.addEventListener('DOMContentLoaded', async () => {
            const featuredProductsContainer = document.getElementById('featured-products');
            const apiUrl = 'https://fakestoreapi.com/products'; // Example API URL

            try {
                // const data = await fetchDataWithCallbackBasedPromise(apiUrl); // Await the callback-based function
                const data = await fetchDataPromise(apiUrl); // Await the promise-based function
                // const data = await fetchDataAsync(apiUrl); // Await the async function

                if (data.length > 0) {
                    featuredProductsContainer.innerHTML = ''; // Clear any existing items
                    data.slice(0, 10).forEach(product => {
                        const productElement = document.createElement('div');
                        productElement.className = 'product';
                        productElement.innerHTML = `
                            <img src="${product.image}" alt="${product.title}">
                            <h3>${product.title}</h3>
                            <p>$${product.price.toFixed(2)}</p>
                        `;
                        featuredProductsContainer.appendChild(productElement);
                    });
                } else {
                    featuredProductsContainer.innerHTML = '<p>No products available</p>';
                }
            } catch (error) {
                console.error('Error displaying products:', error);
            }
        });